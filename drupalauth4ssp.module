<?php
/**
 * @file
 * DrupalAuth For simpleSAMLphp module.
 *
 * This module tightly integrates the SimpleSAMLphp Identity Provider login experience with a Drupal site.
 */

use Drupal\Core\Routing\TrustedRedirectResponse;
use Symfony\Component\HttpFoundation\RedirectResponse;


/**
 * Implements hook_user_login().
 */
function drupalauth4ssp_user_login($account) {
  _drupalauth4ssp_exec($account);
}

/**
 * Implements hook_user_logout().
 */
function drupalauth4ssp_user_logout($account) {
  // Get the configuration information from SimpleSAMLphp.
  $ssp_config = _drupalauth4ssp_get_simplesamlphp_config();

  // If we don't have configuration, exit without doing anything.
  if (!is_array($ssp_config)) {
    // The least we can do is write something to the watchdog so someone will know what's happening.
    \Drupal::logger('drupalauth4ssp')->warning('Could not use drupalauth for %name, could not get the SimpleSAMLphp configuration.', array('%name' => $account->name));
    return;
  }

  // Delete the cookie.
  setcookie($ssp_config['cookie_name'], sha1($ssp_config['secretsalt'] . $account->uid) . ':' . $account->uid, time() - 3600, $ssp_config['baseurlpath']);

  // Invalidate SimpleSAML session by expiring it.
  $session = \SimpleSAML\Session::getSessionFromRequest();
  // Backward compatibility with SimpleSAMP older than 1.14.
  // SimpleSAML_Session::getAuthority() has been removed in 1.14.
  // @see https://simplesamlphp.org/docs/development/simplesamlphp-upgrade-notes-1.14
  if (method_exists($session, 'getAuthority')) {
    $session->setAuthorityExpire($session->getAuthority(), 1);
  }
  else {
    foreach ($session->getAuthorities() as $authority) {
      $session->setAuthorityExpire($authority, 1);
    }
  }

  // If the ReturnTo URL is present, send the user to the URL.
  if (isset($_GET['ReturnTo']) && $_GET['ReturnTo']) {

    $returnto_list =   \Drupal::service('config.factory')->get('drupalauth4ssp.settings')->get('returnto_list');
    $path_matcher =   \Drupal::service('path.matcher');
    // Check the ReturnTo if it's in the allowed list.
    if ($path_matcher->matchPath($_GET['ReturnTo'], $returnto_list)) {
      $destination = &drupal_static(__FUNCTION__);
      $destination = $_GET['ReturnTo'];
    }

  }
}

/**
 * Implements hook_drupal_goto_alter().
 */
function drupalauth4ssp_drupal_goto_alter(&$path, &$options, &$http_response_code) {
  $destination = &drupal_static('drupalauth4ssp_user_logout');
  if (!$path && $destination) {
    drupal_goto($destination);
  }
}


/**
 * Implements hook_user_view().
 */
function drupalauth4ssp_user_view($build, $account) {
  if (\Drupal::currentUser()->id() == $account->id()) {
    _drupalauth4ssp_exec($account);
  }
}

/**
 * Returns the SimpleSAMLphp configuration.
 */
function _drupalauth4ssp_get_simplesamlphp_config() {
  $config = NULL;

  $ssp_config = \SimpleSAML\Configuration::getInstance();

  if (!is_object($ssp_config)) {
    return;
  }

  // Get the secretsalt.
  $config['secretsalt'] = $ssp_config->getValue('secretsalt');

  // Get the baseurlpath.
  $config['baseurlpath'] = $ssp_config->getBasePath();

  unset($ssp_config);

  $ssp_authsources = \SimpleSAML\Configuration::getConfig('authsources.php');

  $authsource =   \Drupal::service('config.factory')->get('drupalauth4ssp.settings')->get('authsource');


  // get cookie_name from specified authsource
  $config['cookie_name'] = !empty($authsource['cookie_name']) ? $authsource['cookie_name'] : 'drupalauth4ssp';

  unset($ssp_authsources);

  return $config;

}

/**
 * Sets a special cookie for drupalauth4ssp.
 */
function _drupalauth4ssp_exec($account) {

  // Get the configuration information from SimpleSAMLphp.
  $ssp_config = _drupalauth4ssp_get_simplesamlphp_config();

  // If we don't have configuration, exit without doing anything.
  if (!is_array($ssp_config)) {
    // The least we can do is write something to the watchdog so someone will know what's happening.
    \Drupal::logger('drupalauth4ssp')->warning('Could not use drupalauth for %name, could not get the SimpleSAMLphp configuration.', array('%name' => $account->label()));
    return;
  }

  // Store the authenticated user's uid in the cookie (create a validation hash to ensure nobody tampers with the uid).
  setcookie($ssp_config['cookie_name'], sha1($ssp_config['secretsalt'] . $account->id()) . ':' . $account->id(), 0, $ssp_config['baseurlpath']);

  // If the ReturnTo URL is present, send the user to the URL.
  $request = \Drupal::request();
  $ReturnTo = $request->query->get('ReturnTo');
  if (isset($_GET['ReturnTo']) && $_GET['ReturnTo']) {

    $returnto_list =   \Drupal::service('config.factory')->get('drupalauth4ssp.settings')->get('returnto_list');
    $path_matcher =   \Drupal::service('path.matcher');
    // Check the ReturnTo if it's in the allowed list.
    $match = $path_matcher->matchPath($_GET['ReturnTo'], $returnto_list);
    if ($match) {
//    if ($path_matcher->matchPath($_GET['ReturnTo'], $returnto_list)) {
      // see https://www.drupal.org/node/2023537
//      return new RedirectResponse(\Drupal\Core\Url::fromUri($_GET['ReturnTo']));
      $response =  new TrustedRedirectResponse($_GET['ReturnTo']);
//      $response = new RedirectResponse($url->toString());
      $request = \Drupal::request();
      // Save the session so things like messages get saved.
      $request->getSession()->save();
      $response->prepare($request);
      // Make sure to trigger kernel events.
      \Drupal::service('kernel')->terminate($request, $response);
      $response->send();
    }

  }

}

