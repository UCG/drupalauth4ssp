<?php

/**
 * @file
 * Drupal Authentication for simpleSAMLphp module hook implementations, etc.
 *
 * This module tightly integrates the SimpleSAMLphp Identity Provider login
 * experience with a Drupal site.
 */

declare(strict_types = 1);

use Drupal\Core\Form\FormStateInterface;
use Drupal\drupalauth4ssp\Helper\CookieHelpers;

/**
 * Implements hook_form_FORM_ID_alter().
 */
function drupalauth4ssp_form_user_login_form_alter(&$form, FormStateInterface $form_state) {
  // Don't do SSO logic unless SP-initiated login is being performed.
  if (_drupalauth4ssp_is_sp_initiated_login_being_performed()) {
    $form['#submit'][] = 'drupalauth4ssp_user_sso_login_submit';
  }
}

/**
 * Implements hook_user_login().
 */
function drupalauth4ssp_user_login($account) {
  // If necessary, and if the user is an SSO-enabled user, set a cookie to
  // indicate that there may be an IdP session.
  if (\Drupal::service('drupalauth4ssp.user_validator')->isUserValid($account)) {
    // Grab the cookie's name.
    $isPossibleIdpSessionCookieName = \Drupal::configFactory()->get('drupalauth4ssp.settings')->get('is_possible_idp_session_cookie_name');
    // Make the expiry time as large as possible, because if it is detected later
    // that we are logged out, this cookie will automatically be deleted.
    $expiryTime = PHP_INT_MAX;

    // If we are performing a service provider initiated login, the response
    // subscriber will probably pass control off to simpleSAMLphp to perform a
    // redirect. Since the redirect isn't performed in the normal Symfony way,
    // we can't rely upon Symfony's cookie functionality to set the cookie.
    // Hence, we just use setcookie().
    setcookie($isPossibleIdpSessionCookieName, 'TRUE', $expiryTime, '/', CookieHelpers::getIsPossibleIdpSessionCookieDomain());
  }
}

/**
 * For successful SSO logins, sets a variable indicating login was successful.
 *
 * @param array $form
 *   Form.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   Form state.
 */
function drupalauth4ssp_user_sso_login_submit($form, FormStateInterface $form_state) {
  // Here, we set a variable that can be read by the kernel.response event
  // subscriber in
  // Drupal\drupalauth4ssp\EventSubscriber\SpInitiatedLoginRouteResponseSubscriber.
  // This variable indicates the login form was successfully validated and
  // submitted. The subscriber above can read this variable and use it to help
  // determine whether to pass user attributes to simpleSAMLphp.
  $wasLoginFormSubmittedSuccessfully = &drupal_static('drupalauth4ssp_var_wasLoginFormSubmittedSuccessfully');
  $wasLoginFormSubmittedSuccessfully = TRUE;
}

/**
 * Gets the current route name, if possible.
 *
 * @return string|null
 *   Current route name, or 'NULL' if no route found.
 */
function _drupalauth4ssp_get_current_route() : ?string {
  return \Drupal::routeMatch()->getRouteName();
}

function _drupalauth4ssp_is_current_route_login_route() : bool {
  return _drupalauth4ssp_get_current_route() === 'user.login';
}

/**
 * Checks if route and URL query string indicate an SP-initiated login.
 *
 * @return bool
 *   'TRUE' if the route and query string indicate than an SP-initiated login is
 *   being performed, else 'FALSE'.
 */
function _drupalauth4ssp_is_sp_initiated_login_being_performed() : bool {
  return (_drupalauth4ssp_is_current_route_login_route() && \Drupal::request()->query->has('fromSp')) ? TRUE : FALSE;
}
