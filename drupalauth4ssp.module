<?php

/**
 * @file
 * DrupalAuth For simpleSAMLphp module.
 *
 * This module tightly integrates the SimpleSAMLphp Identity Provider login
 * experience with a Drupal site.
 */

use Drupal\Component\Utility\Crypt;
use Drupal\Core\Session\AccountInterface;
use Drupal\Core\Url;
use SimpleSAML\Configuration;
use SimpleSAML\Session;
use Drupal\user\Entity\User;

/**
 * Implements hook_user_login().
 *
 * Sets a special cookie for drupalauth SimpleSAMLphp module.
 */
function drupalauth4ssp_user_login($account) {
  // Only set cookie if we are performing an SP-initiated SSO login.
  if (_drupalauth4ssp_is_current_route_sso_login_route()) {
    // Double check to ensure user is SSO-enabled.
    if (\Drupal::service('drupalauth4ssp.account_validator')->isAccountValid($account)) {
      drupalauth4ssp_set_user_cookie($account);
    }
  }
}

/**
 * Set auth cookie for the account.
 *
 * @param \Drupal\Core\Session\AccountInterface $account
 *   User account.
 *
 * @todo Move to class and depend on SSP config service?
 * @see _drupalauth4ssp_get_simplesamlphp_config()
 */
function drupalauth4ssp_set_user_cookie(AccountInterface $account) {
  // Get the configuration information from SimpleSAMLphp.
  $ssp_config = _drupalauth4ssp_get_simplesamlphp_config();

  // If we don't have configuration, exit without doing anything.
  if (!is_array($ssp_config)) {
    // The least we can do is write something to the watchdog so someone will
    // know what's happening.
    \Drupal::logger('drupalauth4ssp')
      ->warning('Could not use drupalauth for %name, could not get the SimpleSAMLphp configuration.', ['%name' => $account->getAccountName()]);
    return;
  }

  // We are going to generate a nonce which we will add to the cookie set below.
  // We will also store this nonce in the session, along with an expiry time for
  // this nonce. This is to prevent "replay attacks," where a user might re-use
  // the cookie created below to log in multiple times. With what we are doing
  // here, such attacks become very unlikely -- the nonce (with very high
  // probability) cannot be re-used, so the attacker would have to guess the
  // value of the nonce generated below to conduct a replay attack. This would
  // be very improbable, so replay attacks are effectively mitigated.
  // A session should always be running right now.
  assert(session_id());
  // Keep trying until we get a nonce that isn't already used by this session.
  do {
    // Nonce = base-64 encoded version of 32 cryptographically random bytes.
    $nonce = base64_encode(random_bytes(32));
    $nonceSessionVariableName = 'ssoLoginNonce:' . $nonce;
  } while (isset($_SESSION[$nonceSessionVariableName]));
  // Store nonce and nonce expiry time in session -- expire after five minutes.
  $_SESSION[$nonceSessionVariableName] = time() + 300;

  // Store the authenticated user's uid in the cookie (create a validation hash
  // to ensure nobody tampers with the uid), along with the nonce.
  // @todo Set via request
  $hash = Crypt::hmacBase64($account->id(), $ssp_config['secretsalt'] . \Drupal::service('private_key')->get());
  setcookie($ssp_config['cookie_name'], $hash . ':' . $account->id() . $nonce, 0, $ssp_config['baseurlpath']);
}

/**
 * Implements hook_user_logout().
 */
function drupalauth4ssp_user_logout($account) {
  /** @var \Drupal\Core\Session\AccountProxy $account */
  // Get the configuration information from SimpleSAMLphp.
  $ssp_config = _drupalauth4ssp_get_simplesamlphp_config();

  // If we don't have configuration, exit without doing anything.
  if (!is_array($ssp_config)) {
    // The least we can do is write something to the watchdog so someone will
    // know what's happening.
    \Drupal::logger('drupalauth4ssp')->warning('Could not use drupalauth for %name, could not get the SimpleSAMLphp configuration.', ['%name' => $account->name]);
    return;
  }

  // Delete the cookie.
  $hash = Crypt::hmacBase64($account->id(), $ssp_config['secretsalt'] . \Drupal::service('private_key')->get());
  setcookie($ssp_config['cookie_name'], $hash . ':' . $account->id(), time() - 3600, $ssp_config['baseurlpath']);
}

/**
 * Returns the SimpleSAMLphp configuration.
 *
 * @todo Convert to service?
 */
function _drupalauth4ssp_get_simplesamlphp_config() {
  $config = NULL;

  $ssp_config = Configuration::getInstance();

  if (!is_object($ssp_config)) {
    return;
  }

  // Get the secretsalt.
  $config['secretsalt'] = $ssp_config->getValue('secretsalt');

  // Get the baseurlpath.
  $config['baseurlpath'] = $ssp_config->getBasePath();

  unset($ssp_config);

  $ssp_authsources = Configuration::getConfig('authsources.php');

  $authsource = $ssp_authsources->getValue(\Drupal::service('config.factory')->get('drupalauth4ssp.settings')->get('authsource'));

  // Get cookie_name from specified authsource.
  $config['cookie_name'] = !empty($authsource['cookie_name']) ? $authsource['cookie_name'] : 'drupalauth4ssp';

  unset($ssp_authsources);

  return $config;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function drupalauth4ssp_form_user_login_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state) {
  // Don't do SSO logic unless the login route is the SP-initiated SSO route.
  if (_drupalauth4ssp_is_current_route_sso_login_route()) {
    $form['#submit'][] = 'drupalauth4ssp_user_login_submit';
  }
}

/**
 * Sets redirect upon successful login.
 */
function drupalauth4ssp_user_login_submit($form, \Drupal\Core\Form\FormStateInterface $form_state) {
  // If the ReturnTo URL is okay, send the user to the URL.
  $returnToUrlManager = \Drupal::service('drupalauth4ssp.return_url_manager');
  if ($returnToUrlManager->isReturnUrlValid()) {
    $form_state->setRedirectUrl(Url::fromUri($returnToUrlManager->getReturnUrl()));
  }
}

/**
 * Checks to see if the current route is the SP-initiated SSO login route.
 *
 * @return bool 'TRUE' if SP-initiated SSO route, else 'FALSE'
 */
function _drupalauth4ssp_is_current_route_sso_login_route() {
  return \Drupal::routeMatch()->getRouteName() == 'drupalauth4ssp.ssoLogin';
}
